generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Residential {
  id          BigInt   @id @default(autoincrement())
  createDate  DateTime @default(now()) @db.Timestamp
  country     String   @db.VarChar(2)
  subdivision String
  city        String
  isp         String
  asn         Int
  nodes       Int

  // Many-to-many relation with ZipCode
  zipCodes    ResidentialZipCode[]

  @@unique([country, subdivision, city, isp, asn])
  @@map("residential")
}

model DataCenter {
  id          BigInt   @id @default(autoincrement())
  createDate  DateTime @default(now()) @db.Timestamp
  country     String   @db.VarChar(2)
  subdivision String
  city        String
  isp         String
  asn         Int
  zip         String
  nodes       Int

  @@unique([country, subdivision, city, isp, asn, zip])
  @@map("data_center")
}

model Mobile {
  id          BigInt   @id @default(autoincrement())
  createDate  DateTime @default(now()) @db.Timestamp
  country     String   @db.VarChar(2)
  subdivision String
  city        String
  isp         String
  asn         Int
  zip         String
  nodes       Int

  @@unique([country, subdivision, city, isp, asn, zip])
  @@map("mobile")
}

model ZipCode {
  id          BigInt   @id @default(autoincrement())
  zip         String   @unique
  country     String   @db.VarChar(2)
  subdivision String
  city        String
  createDate  DateTime @default(now()) @db.Timestamp

  // Many-to-many relation with Residential
  residentials ResidentialZipCode[]

  @@map("zip_codes")
  @@index([country, subdivision, city])
}

model ResidentialZipCode {
  id            BigInt      @id @default(autoincrement())
  residentialId BigInt
  zipCodeId     BigInt
  createDate    DateTime    @default(now()) @db.Timestamp

  residential   Residential @relation(fields: [residentialId], references: [id], onDelete: Cascade)
  zipCode       ZipCode     @relation(fields: [zipCodeId], references: [id], onDelete: Cascade)

  @@unique([residentialId, zipCodeId])
  @@map("residential_zip_codes")
}

model Package {
  id                  BigInt            @id @default(autoincrement())
  packageKey          String            @unique
  createdAt           DateTime
  expiredAt           DateTime?
  isSuspended         Boolean
  isActive            Boolean
  status              String
  proxyCount          Int
  commonLimit         BigInt?           
  dailyLimit          BigInt?           
  weeklyLimit         BigInt?           
  monthlyLimit        BigInt?
  dailyUsage          BigInt
  weeklyUsage         BigInt
  monthlyUsage        BigInt
  commonUsage         BigInt
  updateDate          DateTime          @default(now()) @db.Timestamp
  
  trafficHistory      PackageTrafficHistory[]

  @@map("packages")
}

model PackageTrafficHistory {
  id              BigInt    @id @default(autoincrement())
  packageId       BigInt
  date            DateTime  @db.Date
  dailyUsage      BigInt   
  createDate      DateTime  @default(now()) @db.Timestamp
  
  package         Package   @relation(fields: [packageId], references: [id], onDelete: Cascade)
  
  @@unique([packageId, date])
  @@map("package_traffic_history")
}